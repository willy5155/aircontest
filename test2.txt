/**
 *  LG_AIRCON_V1
 *
 *  Copyright 2021 SJH
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 */

import groovy.json.JsonSlurper
import groovy.transform.Field

@Field
AIR_CLEAN_VALUE = [
	0:[val: "@AC_MAIN_AIRCLEAN_OFF_W", str:"OFF"],
    1:[val: "@AC_MAIN_AIRCLEAN_ON_W", str:"ON"]
]

@Field
OPERATION_VALUE = [
	0: [val: "@AC_MAIN_OPERATION_OFF_W", str: "OFF"],
    1: [val: "@AC_MAIN_OPERATION_RIGHT_ON_W", str: "RIGHT ON"],
    256: [val: "@AC_MAIN_OPERATION_LEFT_ON_W", str: "LEFT ON"],
    257: [val: "@AC_MAIN_OPERATION_ALL_ON_W", str: "ALL ON"]
]

@Field
OP_MODE_VALUE = [
	0:[val: "@AC_MAIN_OPERATION_MODE_COOL_W", str: ["EN":"COOL", "KR":"냉방"] ],
    1:[val: "@AC_MAIN_OPERATION_MODE_DRY_W", str: ["EN":"DRY", "KR":"제습"] ],
    2:[val: "@AC_MAIN_OPERATION_MODE_FAN_W", str: ["EN":"FAN", "KR":"팬"] ],
    3:[val: "@AC_MAIN_OPERATION_MODE_AI_W", str: ["EN":"AI", "KR":"인공지능"] ],
    4:[val: "@AC_MAIN_OPERATION_MODE_HEAT_W", str: ["EN":"HEAT", "KR":"열"] ],
    5:[val: "@AC_MAIN_OPERATION_MODE_AIRCLEAN_W", str: ["EN":"AIR CLEAN", "KR":"공기청정"] ],
    6:[val: "@AC_MAIN_OPERATION_MODE_ACO_W", str: ["EN":"ACO", "KR":"ACO"] ],
    7:[val: "@AC_MAIN_OPERATION_MODE_AROMA_W", str: ["EN":"AROMA", "KR":"아로마"] ],
    8:[val: "@AC_MAIN_OPERATION_MODE_ENERGYSAVING_W", str: ["EN":"EVERGY SAVING", "KR":"절전"] ]
]

@Field 
WIND_VALUE = [
    0: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_W", str:"Slow"],
    1: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_W", str:"Slow Low"],
    2: [val:"@AC_MAIN_WIND_STRENGTH_LOW_W", str:"Low"],
    3: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_W", str:"Low Mid"],
    4: [val:"@AC_MAIN_WIND_STRENGTH_MID_W", str:"Mid"],
    5: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_W", str:"Mid High"],
    6: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_W", str:"High"],
    7: [val:"@AC_MAIN_WIND_STRENGTH_POWER_W", str:"Power"],
    8: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_W", str:"Auto"],
    9: [val:"@AC_MAIN_WIND_STRENGTH_LONGPOWER_W", str:"Long Power"],
    10: [val:"@AC_MAIN_WIND_STRENGTH_SHOWER_W", str:"Shower"],
    11: [val:"@AC_MAIN_WIND_STRENGTH_FOREST_W", str:"Forest"],
    12: [val:"@AC_MAIN_WIND_STRENGTH_TURBO_W", str:"Turbo"],
    256: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_RIGHT_W", str:"Slow Low Left & Slow Right"],
    257: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_LOW_RIGHT_W", str:"Slow Low Left & Slow Low Right"],
    258: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_RIGHT_W", str:"Slow Low Left & Low Right"],
    259: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_MID_RIGHT_W", str:"Slow Low Left & Low Mid Right"],
    260: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_RIGHT_W", str:"Slow Low Left & Mid Right"],
    261: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_HIGH_RIGHT_W", str:"Slow Low Left & Mid High Right"],
    262: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_HIGH_RIGHT_W", str:"Slow Low Left & High Right"],
    263: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_POWER_RIGHT_W", str:"Slow Low Left & Power Right"],
    264: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_AUTO_RIGHT_W", str:"Slow Low Left & Auto Right"],
    511: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_LEFT_W", str:"Slow Low Left"],
    512: [val:"@AC_MAIN_WIND_STRENGTH_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_RIGHT_W", str:"Low Left & Slow Right"],
    513: [val:"@AC_MAIN_WIND_STRENGTH_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_LOW_RIGHT_W", str:"Low Left & Slow Low Right"],
    514: [val:"@AC_MAIN_WIND_STRENGTH_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_RIGHT_W", str:"Low Left & Low Right"],
    515: [val:"@AC_MAIN_WIND_STRENGTH_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_MID_RIGHT_W", str:"Low Left & Low Mid Right"],
    516: [val:"@AC_MAIN_WIND_STRENGTH_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_RIGHT_W", str:"Low Left & Mid Right"],
    517: [val:"@AC_MAIN_WIND_STRENGTH_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_HIGH_RIGHT_W", str:"Low Left & Mid High Right"],
    518: [val:"@AC_MAIN_WIND_STRENGTH_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_HIGH_RIGHT_W", str:"Low Left & High Right"],
    519: [val:"@AC_MAIN_WIND_STRENGTH_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_POWER_RIGHT_W", str:"Low Left & Power Right"],
    520: [val:"@AC_MAIN_WIND_STRENGTH_LOW_LEFT_W|AC_MAIN_WIND_STRENGTH_AUTO_RIGHT_W", str:"Low Left & Auto Right"],
    767: [val:"@AC_MAIN_WIND_STRENGTH_LOW_LEFT_W", str:"Low Left & Auto Right"],
    768: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_RIGHT_W", str:"Low Mid Left & Slow Right"],
    769: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_LOW_RIGHT_W", str:"Low Mid Left & Slow Low Right"],
    770: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_RIGHT_W", str:"Low Mid Left & Low Right"],
    771: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_MID_RIGHT_W", str:"Low Mid Left & Low Mid Right"],
    772: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_RIGHT_W", str:"Low Mid Left & Mid Right"],
    773: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_HIGH_RIGHT_W", str:"Low Mid Left & Mid High Right"],
    774: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_HIGH_RIGHT_W", str:"Low Mid Left & High Right"],
    775: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_POWER_RIGHT_W", str:"Low Mid Left & Power Right"],
    776: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_AUTO_RIGHT_W", str:"Low Mid Left & Auto Right"],
    1023: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_LEFT_W", str:"Low Mid Left & Auto Right"],
    1024: [val:"@AC_MAIN_WIND_STRENGTH_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_RIGHT_W", str:"Mid Left & Slow Right"],
    1025: [val:"@AC_MAIN_WIND_STRENGTH_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_LOW_RIGHT_W", str:"Mid Left & Slow Low Right"],
    1026: [val:"@AC_MAIN_WIND_STRENGTH_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_RIGHT_W", str:"Mid Left & Low Right"],
    1027: [val:"@AC_MAIN_WIND_STRENGTH_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_MID_RIGHT_W", str:"Mid Left & Low Mid Right"],
    1028: [val:"@AC_MAIN_WIND_STRENGTH_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_RIGHT_W", str:"Mid Left & Mid Right"],
    1029: [val:"@AC_MAIN_WIND_STRENGTH_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_HIGH_RIGHT_W", str:"Mid Left & Mid High Right"],
    1030: [val:"@AC_MAIN_WIND_STRENGTH_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_HIGH_RIGHT_W", str:"Mid Left & High Right"],
    1031: [val:"@AC_MAIN_WIND_STRENGTH_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_POWER_RIGHT_W", str:"Mid Left & Power Right"],
    1032: [val:"@AC_MAIN_WIND_STRENGTH_MID_LEFT_W|AC_MAIN_WIND_STRENGTH_AUTO_RIGHT_W", str:"Mid Left & Auto Right"],
    1279: [val:"@AC_MAIN_WIND_STRENGTH_MID_LEFT_W", str:"Mid Left"],
    1280: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_RIGHT_W", str:"Mid High Left & Slow Right"],
    1281: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_LOW_RIGHT_W", str:"Mid High Left & Slow Low Right"],
    1282: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_RIGHT_W", str:"Mid High Left & Low Right"],
    1283: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_MID_RIGHT_W", str:"Mid High Left & Low Mid Right"],
    1284: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_RIGHT_W", str:"Mid High Left & Mid Right Right"],
    1285: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_HIGH_RIGHT_W", str:"Mid High Left & Mid High Right"],
    1286: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_HIGH_RIGHT_W", str:"Mid High Left & High Right"],
    1287: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_POWER_RIGHT_W", str:"Mid High Left & Power Right"],
    1288: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_AUTO_RIGHT_W", str:"Mid High Left & Auto Right"],
    1535: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_LEFT_W", str:"Mid High Left"],
    1536: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_RIGHT_W", str:"High Left & Slow Right"],
    1537: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_LOW_RIGHT_W", str:"High Left & Slow Low Right"],
    1538: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_RIGHT_W", str:"High Left & Low Right"],
    1539: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_MID_RIGHT_W", str:"High Left & Low Mid Right"],
    1540: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_RIGHT_W", str:"High Left & Mid Right"],
    1541: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_HIGH_RIGHT_W", str:"High Left & Mid High Right"],
    1542: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_HIGH_RIGHT_W", str:"High Left & High Right"],
    1543: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_POWER_RIGHT_W", str:"High Left & Power Right"],
    1544: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_LEFT_W|AC_MAIN_WIND_STRENGTH_AUTO_RIGHT_W", str:"High Left & Auto Right"],
    1791: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_LEFT_W", str:"High Left"],
    1792: [val:"@AC_MAIN_WIND_STRENGTH_POWER_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_RIGHT_W", str:"Power Left & Slow Right"],
    1793: [val:"@AC_MAIN_WIND_STRENGTH_POWER_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_LOW_RIGHT_W", str:"Power Left & Slow Low Right"],
    1794: [val:"@AC_MAIN_WIND_STRENGTH_POWER_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_RIGHT_W", str:"Power Left & Low Right"],
    1795: [val:"@AC_MAIN_WIND_STRENGTH_POWER_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_MID_RIGHT_W", str:"Power Left & Low Mid Right"],
    1796: [val:"@AC_MAIN_WIND_STRENGTH_POWER_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_RIGHT_W", str:"Power Left & Mid Right"],
    1797: [val:"@AC_MAIN_WIND_STRENGTH_POWER_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_HIGH_RIGHT_W", str:"Power Left & Mid High Right"],
    1798: [val:"@AC_MAIN_WIND_STRENGTH_POWER_LEFT_W|AC_MAIN_WIND_STRENGTH_HIGH_RIGHT_W", str:"Power Left & High Right"],
    1799: [val:"@AC_MAIN_WIND_STRENGTH_POWER_LEFT_W|AC_MAIN_WIND_STRENGTH_POWER_RIGHT_W", str:"Power Left & Power Right"],
    1800: [val:"@AC_MAIN_WIND_STRENGTH_POWER_LEFT_W|AC_MAIN_WIND_STRENGTH_AUTO_RIGHT_W", str:"Power Left & Auto Right"],
    2047: [val:"@AC_MAIN_WIND_STRENGTH_POWER_LEFT_W", str:"Power Left"],
    2048: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_RIGHT_W", str:"Auto Left & Slow Right"],
    2049: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_LEFT_W|AC_MAIN_WIND_STRENGTH_SLOW_LOW_RIGHT_W", str:"Auto Left & Slow Low Right"],
    2050: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_RIGHT_W", str:"Auto Left & Low Right"],
    2051: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_LEFT_W|AC_MAIN_WIND_STRENGTH_LOW_MID_RIGHT_W", str:"Auto Left & Low Right"],
    2052: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_RIGHT_W", str:"Auto Left & Mid Right"],
    2053: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_LEFT_W|AC_MAIN_WIND_STRENGTH_MID_HIGH_RIGHT_W", str:"Auto Left & Mid High Right"],
    2054: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_LEFT_W|AC_MAIN_WIND_STRENGTH_HIGH_RIGHT_W", str:"Auto Left & High Right"],
    2055: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_LEFT_W|AC_MAIN_WIND_STRENGTH_POWER_RIGHT_W", str:"Auto Left & Power Right"],
    2056: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_LEFT_W|AC_MAIN_WIND_STRENGTH_AUTO_RIGHT_W", str:"Auto Left & Auto Right"],
    2303: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_LEFT_W", str:"Auto Left"],
    2313: [val:"@AC_MAIN_WIND_STRENGTH_LONGPOWER_LEFT_W|AC_MAIN_WIND_STRENGTH_LONGPOWER_RIGHT_W", str:"Long Power All"],
    2570: [val:"@AC_MAIN_WIND_STRENGTH_SHOWER_LEFT_W|AC_MAIN_WIND_STRENGTH_SHOWER_RIGHT_W", str:"Shower All"],
    2827: [val:"@AC_MAIN_WIND_STRENGTH_FOREST_LEFT_W|AC_MAIN_WIND_STRENGTH_FOREST_RIGHT_W", str:"Forest All"],
    3084: [val:"@AC_MAIN_WIND_STRENGTH_TURBO_LEFT_W|AC_MAIN_WIND_STRENGTH_TURBO_RIGHT_W", str:"Turbo All"],
    65280: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_RIGHT_W", str:"Slow Right"],
    65281: [val:"@AC_MAIN_WIND_STRENGTH_SLOW_LOW_RIGHT_W", str:"Log Right"],
    65282: [val:"@AC_MAIN_WIND_STRENGTH_LOW_RIGHT_W", str:"Low Right"],
    65283: [val:"@AC_MAIN_WIND_STRENGTH_LOW_MID_RIGHT_W", str:"Low Mid Right"],
    65284: [val:"@AC_MAIN_WIND_STRENGTH_MID_RIGHT_W", str:"Mid Right"],
    65285: [val:"@AC_MAIN_WIND_STRENGTH_MID_HIGH_RIGHT_W", str:"Mid Hight Right"],
    65286: [val:"@AC_MAIN_WIND_STRENGTH_HIGH_RIGHT_W", str:"High Right"],
    65287: [val:"@AC_MAIN_WIND_STRENGTH_AUTO_RIGHT_W", str:"Auto Right"]
]



metadata {
	definition (name: "test2", namespace: "test2", author: "SJH", cstHandler: true) {
		capability "Air Conditioner Mode"
		capability "Switch"


	}


	simulator {
		// TODO: define status and reply messages here
	}
    
    tiles {

        standardTile("ACmode", "device.airConditionerMode") {
            state "cool", action: "airConditionerMode.setAirConditionerMode"
        }
        
		standardTile("switch", "device.switch", width: 2, height: 2, canChangeIcon: true) {
			state "off", label: 'Off', action: "switch.on", icon: "st.switches.switch.off", backgroundColor: "#ffffff", nextState: "on"
			state "on", label: 'On', action: "switch.off", icon: "st.switches.switch.on", backgroundColor: "#00A0DC", nextState: "off"
		}
        
        main "ACmode"
        details (["switch" , "ACmode"])


		// TODO: define your main and details tiles here
	}
}

// parse events into attributes
def parse(String description) {
	log.debug "Parsing '${description}'"
}


def setStatus(data){  //에어컨 로그 올라오는 코드
    log.debug "Update >> ${data.key} >> ${data.data}"
    def jsonObj = new JsonSlurper().parseText(data.data)
    
    if(jsonObj.data.state.reported != null){
    	def report = jsonObj.data.state.reported
        
        if(report["airState.operation"] != null){
    		sendEvent(name: "switch", value: report["airState.operation"] == 0 ? "off" : "on")
        }
        
        if(report["airState.opMode"] != null){
            sendEvent(name: "mode", value: OP_MODE_VALUE[report["airState.opMode"]]["str"][language])
            sendEvent(name: "airConditionerMode", value: OP_MODE_VALUE[report["airState.opMode"]]["str"]["EN"])
            
            if(device.currentValue("switch") == "on"){
                switch(report["airState.opMode"]){
                case 0:
                    sendEvent(name: "airConditionerMode", value: "cool")
                    break
                case 1:
                    sendEvent(name: "airConditionerMode", value: "dry")
                    break
                case 2:
                    sendEvent(name: "airConditionerMode", value: "fanOnly")
                    break
                case 3:
                    sendEvent(name: "airConditionerMode", value: "auto")
                    break
                }
            }else{
                sendEvent(name: "airConditionerMode", value: "notSupported")
            }
        }
        
        if(report["airState.tempState.current"] != null){
        	sendEvent(name: "temperature", value: report["airState.tempState.current"], displayed: false)
        }
        
        if(report["airState.tempState.target"] != null){
            sendEvent(name: "coolingSetpoint", value: report["airState.tempState.target"])
        }
                
        if(report["airState.windStrength"] != null){
            sendEvent(name: "wind", value: WIND_VALUE[report["airState.windStrength"]]["str"])
        }
        if(report["airState.humidity.current"] != null){
            sendEvent(name: "humidity", value: (report["airState.humidity.current"]/10), displayed: false)
        }
        
        
        if(report["airState.quality.PM1"] != null){
            sendEvent(name: "pm1", value: report["airState.quality.PM1"], displayed: false)
        }
        if(report["airState.quality.PM10"] != null){
            sendEvent(name: "dustLevel", value: report["airState.quality.PM10"], displayed: false)
        }
        if(report["airState.quality.PM2"] != null){
            sendEvent(name: "fineDustLevel", value: report["airState.quality.PM2"], displayed: false)
        }
        
        if(report["airState.reservation.sleepTime"] != null){
            sendEvent(name: "sleepTime", value: report["airState.reservation.sleepTime"], displayed: false)
        }
        
        if(report["airState.wDir.upDown"] != null){
            sendEvent(name: "windUpDown", value: report["airState.wDir.upDown"] == 0 ? "off" : "on", displayed: false)
        }
        if(report["airState.wDir.upDown"] != null){
            sendEvent(name: "windUpDown", value: report["airState.wDir.upDown"] == 0 ? "off" : "on", displayed: false)
        }
    }
    
//    sendEvent(name:"thermostatFanMode", value:"auto")
    updateLastTime();
}

//def installed(){
//    sendEvent(name: "supportedThermostatFanModes", value: ["auto", "circulate", "followschedule", "on"])
//    sendEvent(name: "supportedThermostatModes", value: ["auto", "cool", "heat", "off"])
//}

def updateLastTime(){
	def now = new Date().format("yyyy-MM-dd HH:mm:ss", location.timeZone)
    sendEvent(name: "lastCheckin", value: now, displayed:false)
}


def setAirConditionerMode(mode) {
	log.debug "setAirConditionerMode " + mode
    switch(mode){
    case "cool":
    	cool()
    	break
    case "dry":
        dry()
        break
    case "fanOnly":
    	fanOnly()
    	break
    case "auto":
        auto()
        break
    }
	// TODO: handle 'setAirConditionerMode' command
}

def on(){
    makeCommand('', '{"command":"Operation","ctrlKey":"basicCtrl","dataKey":"airState.operation","dataValue":' + 1 + '}')
    sendEvent(name: "switch", value: "on")
}

def off(){
    makeCommand('', '{"command":"Operation","ctrlKey":"basicCtrl","dataKey":"airState.operation","dataValue":' + 0 + '}')
    sendEvent(name: "switch", value: "off")
}


def cool(){
    makeCommand('', '{"command":"Set","ctrlKey":"basicCtrl","dataKey":"airState.opMode","dataValue":' + 0 + '}')
}

def dry(){
    makeCommand('', '{"command":"Set","ctrlKey":"basicCtrl","dataKey":"airState.opMode","dataValue":' + 1 + '}')
}

def fanOnly(){
    makeCommand('', '{"command":"Set","ctrlKey":"basicCtrl","dataKey":"airState.opMode","dataValue":' + 2 + '}')
}

def auto(){
    makeCommand('', '{"command":"Set","ctrlKey":"basicCtrl","dataKey":"airState.opMode","dataValue":' + 3 + '}')
}


def control(cmd, value){
	makeCommand(cmd, value)
}

def makeCommand(command, value){
    def body = [
        "id": state.id,
        "command": command,
        "value": value
    ]
    def options = _makeCommand(body)
    sendCommand(options, null)
}

def _makeCommand(body){
	def options = [
     	"method": "POST",
        "path": "/devices/control2",
        "headers": [
        	"HOST": state.app_url,
            "Content-Type": "application/json"
        ],
        "body":body
    ]
    return options
}

def sendCommand(options, _callback){
	def myhubAction = new physicalgraph.device.HubAction(options, null, [callback: _callback])
    sendHubCommand(myhubAction)
}


